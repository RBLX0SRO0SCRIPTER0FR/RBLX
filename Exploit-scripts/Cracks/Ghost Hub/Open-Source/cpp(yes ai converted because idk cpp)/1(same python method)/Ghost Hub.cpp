#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <regex>
#include <curl/curl.h>

// Write callback for libcurl
static size_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp) {
    ((std::string*)userp)->append((char*)contents, size * nmemb);
    return size * nmemb;
}

// HTTP GET request with User-Agent header
std::string http_get(const std::string& url) {
    CURL* curl;
    CURLcode res;
    std::string readBuffer;

    curl = curl_easy_init();
    if (curl) {
        struct curl_slist* headers = NULL;
        headers = curl_slist_append(headers, "User-Agent: Roblox/WinInet");

        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);

        res = curl_easy_perform(curl);
        curl_easy_cleanup(curl);
    }
    return readBuffer;
}

// Split a string by delimiter
std::vector<std::string> split(const std::string& s, char delim) {
    std::vector<std::string> tokens;
    std::string token;
    for (char c : s) {
        if (c == delim) {
            if (!token.empty()) tokens.push_back(token);
            token.clear();
        } else {
            token.push_back(c);
        }
    }
    if (!token.empty()) tokens.push_back(token);
    return tokens;
}

// Extract substring inside quotes using regex
std::string regex_extract(const std::string& text, const std::string& pattern) {
    std::regex re(pattern);
    std::smatch match;
    if (std::regex_search(text, match, re)) {
        return match[1];
    }
    return "";
}

// Extract encrypted payload (after end)(" ... "))
std::string extract_ascii(const std::string& text) {
    std::string marker = "end)(\"";
    size_t start = text.find(marker);
    if (start == std::string::npos) return "";
    start += marker.size();
    size_t end = text.find("\"", start);
    return text.substr(start, end - start);
}

// Decrypt function
std::string decrypt_source(const std::string& source, const std::string& key) {
    std::string decrypted;
    std::vector<std::string> parts = split(source, '/');

    for (size_t i = 0; i < parts.size(); i++) {
        try {
            int byte = std::stoi(parts[i]);
            int k = (int)key[i % key.size()];
            char decoded = (char)((byte - k + 256) % 256);
            decrypted.push_back(decoded);
        } catch (...) {
            continue;
        }
    }
    return decrypted;
}

int main() {
    // 1. Download initial obfuscated script
    std::string ascii_data = http_get("https://anti-httpspy.scriptsobfuscator.workers.dev/Ghost%20Hub");

    // 2. Extract encoded ASCII sequence
    std::string ascii_encoded = regex_extract(ascii_data, "\\(\"([^\"]+)\"\\)");
    std::vector<std::string> ascii_codes = split(ascii_encoded, '\\');

    std::string loader;
    for (auto& code : ascii_codes) {
        try {
            int val = std::stoi(code);
            loader.push_back((char)val);
        } catch (...) {}
    }

    // 3. Extract key + URL
    std::string key = regex_extract(loader, "\\[12\\]=\"([^\"]*)\"");
    std::string GhostHubUrl = regex_extract(loader, "HttpGet\\(\"([^\"]+)\"\\)");

    std::cout << "Key found: " << key << "\n";
    std::cout << "GhostHub URL: " << GhostHubUrl << "\n";

    // 4. Download GhostHub second-stage script
    std::string ghosthub_enc = http_get(GhostHubUrl);

    // 5. Extract encrypted payload
    std::string source = extract_ascii(ghosthub_enc);

    // 6. Decrypt payload
    std::string GhostHub = decrypt_source(source, key);

    // 7. Print first 10 lines
    std::cout << "\nGhost Hub CRACKED LOL:\n";
    size_t pos = 0, linecount = 0;
    while (linecount < 10 && (pos = GhostHub.find('\n', pos)) != std::string::npos) {
        std::cout << GhostHub.substr(0, pos) << "\n";
        GhostHub = GhostHub.substr(pos + 1);
        linecount++;
    }

    // 8. Save to file
    std::ofstream outfile("Ghost Hub.lua");
    outfile << GhostHub;
    outfile.close();

    std::cout << "\nSaved to Ghost Hub.lua\n";
    return 0;
}
